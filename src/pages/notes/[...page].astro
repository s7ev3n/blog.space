---
import { type CollectionEntry, getCollection } from "astro:content";
import Pagination from "@/components/Paginator.astro";
import Note from "@/components/note/Note.astro";
import { getAllNoteTags } from "@/data/post";
import PageLayout from "@/layouts/Base.astro";
import { collectionDateSort } from "@/utils/date";
import type { GetStaticPaths, Page } from "astro";
import { Icon } from "astro-icon/components";

export const getStaticPaths = (async ({ paginate }) => {
	const MAX_NOTES_PER_PAGE = 10;
	const MAX_TAGS = 5;
	const allNotes = await getCollection("note");
	const uniqueTags = getUniqueNoteTags(allNotes).slice(0, MAX_TAGS);
	return paginate(allNotes.sort(collectionDateSort), { 
		pageSize: MAX_NOTES_PER_PAGE,
		props: {uniqueTags} }
	);
}) satisfies GetStaticPaths;

export function getUniqueNoteTags(notes: CollectionEntry<"note">[]) {
	return [...new Set(getAllNoteTags(notes))];
}

interface Props {
	page: Page<CollectionEntry<"note">>;
	uniqueTags: string[];
}

const { page, uniqueTags } = Astro.props;

const meta = {
	description: "Read my collection of notes",
	title: "Notes",
};

const paginationProps = {
	...(page.url.prev && {
		prevUrl: {
			text: "← Previous Page",
			url: page.url.prev,
		},
	}),
	...(page.url.next && {
		nextUrl: {
			text: "Next Page →",
			url: page.url.next,
		},
	}),
};
---

<PageLayout meta={meta}>
	<section>
		<h1 class="title mb-6 flex items-center gap-3">
			Notes <a class="text-accent" href="/notes/rss.xml" target="_blank">
				<span class="sr-only">RSS feed</span>
				<Icon aria-hidden="true" class="h-6 w-6" focusable="false" name="mdi:rss" />
			</a>
		</h1>
		<ul class="mt-6 space-y-8 text-start">
			{
				page.data.map((note) => (
					<li class="">
						<Note note={note} as="h2" isPreview />
					</li>
				))
			}
		</ul>
		<Pagination {...paginationProps} />
	</section>
	{
		!!uniqueTags.length && (
			<aside>
				<h2 class="title mb-4 flex items-center gap-2 text-lg">
					Tags
					<svg
						aria-hidden="true"
						class="h-6 w-6"
						fill="none"
						stroke="currentColor"
						stroke-linecap="round"
						stroke-linejoin="round"
						stroke-width="1.5"
						viewBox="0 0 24 24"
						xmlns="http://www.w3.org/2000/svg"
					>
						<path d="M0 0h24v24H0z" fill="none" stroke="none" />
						<path d="M7.859 6h-2.834a2.025 2.025 0 0 0 -2.025 2.025v2.834c0 .537 .213 1.052 .593 1.432l6.116 6.116a2.025 2.025 0 0 0 2.864 0l2.834 -2.834a2.025 2.025 0 0 0 0 -2.864l-6.117 -6.116a2.025 2.025 0 0 0 -1.431 -.593z" />
						<path d="M17.573 18.407l2.834 -2.834a2.025 2.025 0 0 0 0 -2.864l-7.117 -7.116" />
						<path d="M6 9h-.01" />
					</svg>
				</h2>
				<ul class="flex flex-wrap gap-2">
					{uniqueTags.map((tag) => (
						<li>
							<a
								aria-label={`View all posts with the tag: ${tag}`}
								class="cactus-link flex items-center justify-center"
								href={`/tags/${tag}/`}
							>
								#{tag}
							</a>
						</li>
					))}
				</ul>
				<span class="mt-4 block sm:text-end">
					<a aria-label="View all blog categories" class="sm:hover:text-link" href="/tags/">
						View all →
					</a>
				</span>
			</aside>
		)
	}
</PageLayout>